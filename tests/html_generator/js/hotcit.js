// Generated by CoffeeScript 1.3.3

/*
TODO: 
Modulasize: 
- move curry methods to another file: GameRequester
- move make_lobby_view to: GameViewMaker: couple with backbone.view/model
- use require to include all in single js file
*/


/*
CHECK: CREATE GAME
CHECK: JOIN GAME
DECLARE READY GAME
DECLARE UNREADY GAME
CHECK: LEAVE GAME
CHECK: GET GAME
CHECK: GET GAMES
*/


(function() {
  var CONTROLLER, CREATE_BTN, DEBUG, DEFAULT_USER, FROM_SERVER_VIEW, GAMEID, GAME_TEMPLATE, GENERATE_RANDOM_GID, JOIN_BTN, LEAVE_BTN, LOBBY_VIEW, MAXPLAYERS, MINPLAYERS, NUMGAMES, PAUSE_BTN, READY_BTN, RECORD_VIEW, SERVER, TEMPLATES, TO_SERVER_VIEW, UNREADY_BTN, UPDATE_INTERVAL, USERID, curryAjax, from_server_view, generate_gameid, getGameId, getGenRandomFlag, getMaxPlayers, getMinPlayers, getUserId, handleResponse, lobby_view, make_lobby_view, record_view, setGameId, setUserId, setupCreateBtn, setupJoinBtn, setupLeaveBtn, setupPauseBtn, setupReadyBtn, setupSetGameIdOnClick, setupUnreadyBtn, templates, to_server_view, update_lobby,
    __hasProp = {}.hasOwnProperty;

  DEBUG = true;

  DEFAULT_USER = 'Alice';

  UPDATE_INTERVAL = 1000;

  SERVER = 'localhost:53998';

  GAMEID = '#gameid';

  USERID = '#userid';

  LOBBY_VIEW = '#lobby_view';

  TO_SERVER_VIEW = '#to_server_view';

  FROM_SERVER_VIEW = '#from_server_view';

  TEMPLATES = '#templates';

  GAME_TEMPLATE = '#game_template';

  NUMGAMES = '#numGames';

  CONTROLLER = '#controller';

  GENERATE_RANDOM_GID = '#generate_random_gameid';

  PAUSE_BTN = '#pauseBtn';

  CREATE_BTN = '#createBtn';

  JOIN_BTN = '#joinBtn';

  LEAVE_BTN = '#leaveBtn';

  READY_BTN = '#readyBtn';

  UNREADY_BTN = '#unreadyBtn';

  RECORD_VIEW = '#record_view';

  MAXPLAYERS = '#maxPlayers';

  MINPLAYERS = '#minPlayers';

  setGameId = function(id) {
    return $("" + GAMEID).val(id);
  };

  getGameId = function() {
    return $("" + GAMEID).val();
  };

  getUserId = function() {
    return $("" + USERID).val();
  };

  setUserId = function(id) {
    return $("" + USERID).val(id);
  };

  getMinPlayers = function() {
    return $("" + MINPLAYERS + " option:selected").val();
  };

  getMaxPlayers = function() {
    return $("" + MAXPLAYERS + " option:selected").val();
  };

  getGenRandomFlag = function() {
    return $("" + CONTROLLER + " " + GENERATE_RANDOM_GID).is(':checked');
  };

  templates = {
    getGameTemplate: function() {
      return $("" + TEMPLATES + " " + GAME_TEMPLATE).html();
    }
  };

  lobby_view = {
    setGames: function(html) {
      return $("" + LOBBY_VIEW).html(html);
    },
    setNumGames: function(num) {
      return $("" + NUMGAMES).html('(' + num + ')');
    }
  };

  from_server_view = {
    setBody: function(body) {
      return $("" + FROM_SERVER_VIEW + " #body").html(body);
    },
    setStatus: function(status, textStatus) {
      return $("" + FROM_SERVER_VIEW + " #status").html("" + status + "  " + textStatus);
    }
  };

  to_server_view = {
    setRequest: function(request) {
      return $("" + TO_SERVER_VIEW + " #request").html(request);
    },
    setHeaders: function(headers) {
      return $("" + TO_SERVER_VIEW + " #headers").html(headers);
    },
    setData: function(data) {
      return $("" + TO_SERVER_VIEW + " #data").html(data);
    }
  };

  record_view = {
    append: function(line) {
      var el, text;
      el = $("" + RECORD_VIEW + " textarea");
      text = el.text();
      text += el.val();
      return el.val(text + '\n' + line);
    },
    record: function(description, method, path, username, params, statuscode, textStatus, data) {
      var line;
      if (description == null) {
        description = ' ';
      }
      if (method == null) {
        method = ' ';
      }
      if (path == null) {
        path = ' ';
      }
      if (params == null) {
        params = ' ';
      }
      if (statuscode == null) {
        statuscode = ' ';
      }
      if (textStatus == null) {
        textStatus = ' ';
      }
      if (data == null) {
        data = ' ';
      }
      line = "[" + description + ", " + method + ", /" + path + ", " + username + ", " + params + ", " + statuscode + ", " + textStatus + ", " + data + "]";
      return record_view.append(line);
    },
    init: function() {
      var el;
      el = $("" + RECORD_VIEW + " textarea");
      el.val("" + SERVER);
      return record_view.append("[description, method, url, username, params, statuscode, reason, data]");
    }
  };

  setupSetGameIdOnClick = function() {
    return $(".game h5").live('click', function() {
      return setGameId($(this).attr('gid'));
    });
  };

  make_lobby_view = function(games_object) {
    var content, game, game_template, gameid, games, key, value;
    game_template = templates.getGameTemplate();
    games = "";
    for (gameid in games_object) {
      if (!__hasProp.call(games_object, gameid)) continue;
      game = games_object[gameid];
      content = (function() {
        var _results;
        _results = [];
        for (key in game) {
          if (!__hasProp.call(game, key)) continue;
          value = game[key];
          _results.push("" + key + ": " + value);
        }
        return _results;
      })();
      games += game_template.replace(/GAMEID/g, gameid).replace(/CONTENT/g, content.join('<br />'));
    }
    lobby_view.setGames(games);
    return lobby_view.setNumGames(Object.keys(games_object).length);
  };

  generate_gameid = function(gameid) {
    var id;
    id = Math.floor(Math.random() * 100000);
    return "mygame" + id;
  };

  handleResponse = function(data, status, textStatus, headers, method, path, params, server) {
    var fdata, fheaders, key, request, tdata, tparams, value;
    request = "" + method + "  " + server + "/" + path + "/";
    tdata = $.isPlainObject(data) ? "@" + (JSON.stringify(data)) + "@" : data;
    tparams = $.isPlainObject(params) ? "@" + (JSON.stringify(params)) + "@" : params;
    record_view.record(' ', method, path, headers['Authorization'], tparams, status, textStatus, tdata);
    fheaders = '';
    for (key in headers) {
      if (!__hasProp.call(headers, key)) continue;
      value = headers[key];
      fheaders += "" + key + " : " + value + "<br />";
    }
    fdata = '';
    if ($.isPlainObject(data)) {
      for (key in data) {
        if (!__hasProp.call(data, key)) continue;
        value = data[key];
        fdata += "" + key + " : " + value + "<br />";
      }
    } else {
      fdata = data;
    }
    from_server_view.setBody(fdata);
    from_server_view.setStatus(status, textStatus);
    to_server_view.setRequest(request);
    to_server_view.setHeaders(fheaders);
    return to_server_view.setData(params);
  };

  update_lobby = function() {
    return doGetLobbyGames(function(body, status, textStatus, headers, method, path, data, server) {
      return make_lobby_view(body);
    }, function(body, status, textStatus, headers, method, path, data, server) {
      return lobby_view.setGames(textStatus);
    });
  };

  setupPauseBtn = function() {
    var id;
    id = setInterval(update_lobby, UPDATE_INTERVAL);
    return $("" + PAUSE_BTN).click(function() {
      if (id) {
        clearInterval(id);
        id = false;
        return $(this).html('update off');
      } else {
        id = setInterval(update_lobby, UPDATE_INTERVAL);
        return $(this).html('update on');
      }
    });
  };

  setupCreateBtn = function() {
    return $("" + CREATE_BTN).click(function() {
      var gid, maxp, minp, uid;
      gid = getGameId();
      uid = getUserId();
      minp = getMinPlayers();
      maxp = getMaxPlayers();
      doCreateGame(gid, uid, minp, maxp, handleResponse, handleResponse);
      if (getGenRandomFlag()) {
        return setGameId(generate_gameid());
      }
    });
  };

  setupJoinBtn = function() {
    return $("" + JOIN_BTN).click(function() {
      var gid, uid;
      gid = getGameId();
      uid = getUserId();
      return doJoinGame(gid, uid, handleResponse, handleResponse);
    });
  };

  setupLeaveBtn = function() {
    return $("" + LEAVE_BTN).click(function() {
      var gid, uid;
      gid = getGameId();
      uid = getUserId();
      return doLeaveGame(gid, uid, handleResponse, handleResponse);
    });
  };

  setupReadyBtn = function() {
    return $("" + READY_BTN).click(function() {
      var gid, uid;
      gid = getGameId();
      uid = getUserId();
      return doDeclareReady(gid, uid, handleResponse, handleResponse);
    });
  };

  setupUnreadyBtn = function() {
    return $("" + UNREADY_BTN).click(function() {
      var gid, uid;
      gid = getGameId();
      uid = getUserId();
      return doRegretReady(gid, uid, handleResponse, handleResponse);
    });
  };

  this.setup_controller = function() {
    setUserId("" + DEFAULT_USER);
    setGameId(generate_gameid());
    update_lobby();
    setupPauseBtn();
    setupCreateBtn();
    setupJoinBtn();
    setupLeaveBtn();
    setupReadyBtn();
    setupUnreadyBtn();
    setupSetGameIdOnClick();
    return record_view.init();
  };

  curryAjax = function(_arg) {
    var authorization, data, error, headers, method, path, success, url;
    method = _arg.method, path = _arg.path, data = _arg.data, success = _arg.success, error = _arg.error, authorization = _arg.authorization;
    headers = {};
    headers["Content-Type"] = "application/json";
    if (authorization != null) {
      headers["Authorization"] = authorization;
    }
    data = data ? data : null;
    url = "http://" + SERVER + "/" + path + "/";
    return $.ajax({
      async: false,
      url: url,
      type: method,
      headers: headers,
      data: data,
      success: function(body, textStatus, xhrObj) {
        var status;
        status = xhrObj.status;
        textStatus = xhrObj.statusText;
        return success(body, status, textStatus, headers, method, path, data, SERVER);
      },
      error: function(jqXHR, textStatus) {
        var body, status;
        status = jqXHR.status;
        body = jqXHR.responseText;
        textStatus = jqXHR.statusText;
        console.log('path', path);
        return error(body, status, textStatus, headers, method, path, data, SERVER);
      }
    });
  };

  this.doDeclareReady = function(gameid, authorization, success, error) {
    return curryAjax({
      method: 'PUT',
      path: "lobby/" + gameid + "/ready",
      authorization: authorization,
      success: function() {
        console.log("Declared ready to play game " + gameid + ".");
        return success.apply(this, arguments);
      },
      error: function() {
        console.log("Could not declare ready to play " + gameid);
        return error.apply(this, arguments);
      }
    });
  };

  this.doRegretReady = function(gameid, authorization, success, error) {
    return curryAjax({
      method: 'DELETE',
      path: "lobby/" + gameid + "/ready",
      authorization: authorization,
      success: function() {
        console.log("Regretted joing game " + gameid + ".");
        return success.apply(this, arguments);
      },
      error: function() {
        console.log("Could not regret joining " + gameid);
        return error.apply(this, arguments);
      }
    });
  };

  this.doLeaveGame = function(gameid, authorization, success, error) {
    return curryAjax({
      method: 'DELETE',
      path: "lobby/" + gameid + "/users",
      authorization: authorization,
      success: function() {
        console.log("Left game " + gameid + ".");
        return success.apply(this, arguments);
      },
      error: function() {
        console.log("Could not leave " + gameid);
        return error.apply(this, arguments);
      }
    });
  };

  this.doJoinGame = function(gameid, authorization, success, error) {
    return curryAjax({
      method: 'PUT',
      path: "lobby/" + gameid + "/users",
      authorization: authorization,
      success: function() {
        console.log("Joined game " + gameid + ".");
        return success.apply(this, arguments);
      },
      error: function() {
        return console.log("Could not join " + gameid, error.apply(this, arguments));
      }
    });
  };

  this.doGetLobbyGame = function(id, success, error) {
    return curryAjax({
      method: 'GET',
      path: "lobby/" + id,
      success: function() {
        console.log("Get lobby game " + id + ".");
        return success.apply(this, arguments);
      },
      error: function() {
        console.log("ERROR: could not get lobby game " + id + ".");
        return error.apply(this, arguments);
      }
    });
  };

  this.doGetLobbyGames = function(success, error) {
    return curryAjax({
      method: 'GET',
      path: 'lobby',
      success: function() {
        return success.apply(this, arguments);
      },
      error: function() {
        return error.apply(this, arguments);
      }
    });
  };

  this.doCreateGame = function(gameid, owner, minPlayers, maxPlayers, success, error) {
    return curryAjax({
      method: 'POST',
      path: "lobby/" + gameid,
      authorization: owner,
      data: "{\"MinPlayers\": " + minPlayers + ", \"MaxPlayers\": " + maxPlayers + "}",
      success: function() {
        console.log("Created new game " + gameid + ".");
        console.log(arguments);
        return success.apply(this, arguments);
      },
      error: function() {
        console.log("ERROR: could not create new game " + gameid + ".");
        return error.apply(this, arguments);
      }
    });
  };

}).call(this);
